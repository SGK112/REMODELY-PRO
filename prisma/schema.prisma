// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // For custom auth
  emailVerified DateTime?
  image         String?
  userType      String    @default("CUSTOMER")
  phone         String?
  phoneVerified Boolean   @default(false)
  phoneVerifiedAt DateTime?
  resetToken    String?
  resetTokenExpiry DateTime?
  
  accounts      Account[]
  sessions      Session[]
  
  // Role-specific profiles
  contractor    Contractor?
  customer      Customer?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  propertyType      String?
  homeSize          String?
  preferredBudget   String?
  projectTimeline   String?
  preferences       String?  // JSON string for materials, styles, features
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes          Quote[]
  reviews         Review[]
  savedContractors SavedContractor[]
  bookings        Booking[]
  payments        Payment[]
}

model Contractor {
  id              String    @id @default(cuid())
  userId          String?   @unique
  businessName    String
  description     String?
  serviceArea     String    // JSON string for areas
  specialties     String    // JSON string for specialties
  yearsExperience Int?
  licenseNumber   String?
  rocLicenseNumber String?   @unique // Arizona ROC License Number
  licenseClass    String?    // ROC License Class (B, R-11, etc.)
  licenseType     String?    // ROC License Type (General, Residential, etc.)
  licenseStatus   String?    // Active, Inactive, etc.
  licenseIssued   DateTime?  // When license was issued
  licenseExpiration DateTime? // When license expires
  qualifyingParty String?    // ROC Qualifying Party
  isROCVerified   Boolean   @default(false) // ROC verification status
  rocVerifiedDate DateTime? // When ROC verification was completed
  rocImportDate   DateTime? // When imported from ROC database
  dbaName         String?    // Doing Business As name
  insuranceInfo   String?
  phone           String?
  website         String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  latitude        Float?
  longitude       Float?
  hourlyRate      Float?
  projectMinimum  Float?
  certifications  String?   // JSON string for certifications
  manufacturers   String?   // JSON string for approved manufacturers
  availableHours  String?   // JSON string for availability
  portfolioImages String?   // JSON string for images
  isVerified      Boolean   @default(false)
  verified        Boolean   @default(false) // Alias for isVerified for consistency
  profileComplete Boolean   @default(false)
  yearsInBusiness Int?      // For scraped data
  rating          Float     @default(0.0)
  reviewCount     Int       @default(0)
  scrapedFrom     String?   // Source of scraped data
  lastScraped     DateTime? // When data was last updated
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes           Quote[]
  portfolio        Portfolio[]
  reviews          Review[]
  savedBy          SavedContractor[]
  bookings         Booking[]
  payments         Payment[]
}

model SavedContractor {
  id           String @id @default(cuid())  
  customerId   String 
  contractorId String 
  createdAt    DateTime @default(now())

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([customerId, contractorId])
}

model Portfolio {
  id          String   @id @default(cuid())
  contractorId String
  title        String
  description  String?
  images       String    // JSON string for SQLite
  projectType  String
  materials    String    // JSON string for SQLite
  cost         Float?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
}

model Quote {
  id               String      @id @default(cuid())
  customerId       String
  contractorId     String
  projectType      String
  description      String
  squareFootage    Float?
  materials        String      // JSON string for SQLite
  location         String
  budget           Float?
  timeline         String?
  status           String      @default("PENDING")
  estimatedCost    Float?
  notes            String?
  validUntil       DateTime?
  adminModified    Boolean?    @default(false)
  adminModifiedAt  DateTime?
  adminModifiedBy  String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  booking    Booking?
  
  @@index([customerId])
  @@index([contractorId])
  @@index([status])
}

model Booking {
  id              String   @id @default(cuid())
  customerId      String
  contractorId    String
  quoteId         String   @unique
  scheduledDate   DateTime
  estimatedHours  Float?
  status          String   @default("SCHEDULED")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  quote      Quote      @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  payments   Payment[]
  
  @@index([customerId])
  @@index([contractorId])
  @@index([scheduledDate])
}

model Payment {
  id            String   @id @default(cuid())
  customerId    String
  contractorId  String
  bookingId     String?
  amount        Float
  stripePaymentIntentId String?
  status        String   @default("PENDING")
  paymentType   String   @default("FULL")
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  booking    Booking?   @relation(fields: [bookingId], references: [id])
  
  @@index([customerId])
  @@index([contractorId])
  @@index([status])
}

model Review {
  id           String    @id @default(cuid())
  customerId   String
  contractorId String
  rating       Int
  title        String?
  comment      String?
  images       String    // JSON string for SQLite
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  @@index([contractorId])
  @@index([rating])
}

model Message {
  id           String   @id @default(cuid())
  senderId     String
  receiverId   String
  
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Material {
  id          String @id @default(cuid())
  name        String @unique
  category    String
  description String?
  imageUrl    String?
  priceRange  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
}
